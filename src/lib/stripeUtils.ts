import { stripeServerClient } from "@/app/services/stripe/stripeServer";

// Check if this is a dummy/fake Stripe session ID generated by seeding
export function isDummyStripeSession(sessionId: string): boolean {
  // Must start with cs_ to be a valid Stripe session ID
  if (!sessionId.startsWith('cs_')) {
    return false;
  }
  
  // Explicit dummy session patterns from our seeding
  if (sessionId.startsWith('cs_test_dummy_') || 
      sessionId.startsWith('cs_spike_') || 
      sessionId.includes('_dummy_') ||
      sessionId.includes('_spike_')) {
    return true;
  }
  
  // Legacy patterns from old seeding - look for timestamp patterns specifically
  // Real Stripe sessions don't have long numeric sequences like timestamps
  if (sessionId.match(/cs_[A-Za-z0-9]+_\d{13,}_\d+$/)) {
    return true;
  }
  
  // If it's a real Stripe test session (cs_test_...) but not our dummy pattern, it's real
  if (sessionId.startsWith('cs_test_') && !sessionId.includes('dummy')) {
    return false;
  }
  
  // If it's a real Stripe live session (cs_live_...), it's definitely real
  if (sessionId.startsWith('cs_live_')) {
    return false;
  }
  
  return false;
}

// Mock Stripe session data for development
export function createMockStripeSession(sessionId: string, pricePaidInCents: number) {
  return {
    id: sessionId,
    payment_intent: {
      id: `pi_mock_${sessionId.slice(-10)}`,
      latest_charge: {
        id: `ch_mock_${sessionId.slice(-10)}`,
        billing_details: {
          email: 'test@example.com',
          name: 'Test User',
          address: {
            city: 'San Francisco',
            country: 'US',
            line1: '123 Test St',
            postal_code: '94105',
            state: 'CA'
          }
        },
        receipt_url: `https://pay.stripe.com/receipts/mock_${sessionId.slice(-10)}`
      }
    },
    total_details: {
      amount_discount: 0,
      amount_shipping: 0,
      amount_tax: 0,
      breakdown: {
        discounts: []
      }
    },
    amount_total: pricePaidInCents,
    amount_subtotal: pricePaidInCents
  };
}

// Safe wrapper for retrieving Stripe sessions that handles dummy data
export async function safeRetrieveStripeSession(sessionId: string, options?: any) {
  if (isDummyStripeSession(sessionId)) {
    // For development/seeded data, return mock session
    console.warn(`Using mock Stripe session for dummy ID: ${sessionId}`);
    throw new Error(`Mock Stripe session - this is dummy data from seeding. Session ID: ${sessionId}`);
  }
  
  // For real Stripe sessions, use actual API
  return stripeServerClient.checkout.sessions.retrieve(sessionId, options);
}

// Safe wrapper for refunds that handles dummy data
export async function safeCreateRefund(paymentIntentId: string) {
  if (paymentIntentId.startsWith('pi_mock_')) {
    console.warn(`Skipping refund for mock payment intent: ${paymentIntentId}`);
    return { 
      id: `re_mock_${paymentIntentId.slice(-10)}`,
      amount: 0,
      status: 'succeeded' 
    };
  }
  
  return stripeServerClient.refunds.create({
    payment_intent: paymentIntentId,
  });
}